<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="index.js" type="module" defer></script>
    <script src="../../helpers/header.js" type="module" defer></script>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div class="container text-center">
      <div class="carousel" id="carousel">
        <div class="handle left-handle" id="leftHandle"><</div>
        <div class="handle right-handle" id="rightHandle">></div>
      </div>
    </div>
  </body>
</html>
------------------------
const carousel = document.getElementById('carousel');
const leftHandle = document.getElementById('leftHandle');
const rightHandle = document.getElementById('rightHandle');

class Carousel {
  constructor(carousel, images, leftHandle, rightHandle, selected = 0) {
    this.carousel = carousel;
    this.images = images;
    this.leftHandle = leftHandle;
    this.rightHandle = rightHandle;
    this.selected = selected;

    this.placeImages();
    this.dotHolder = this.createProgress();
    this.addListeners();
    this.setSelection();
  }

  addListeners() {
    this.leftHandle.addEventListener('click', this.swipeLeft);
    this.rightHandle.addEventListener('click', this.swipeRight);
    this.dotHolder.addEventListener('click', this.dotSelect);
  }

  swipeLeft = () => {
    this.selected -= 1;
    if (this.selected < 0) this.selected += this.images.length;
    this.setSelection();
  };

  swipeRight = () => {
    this.selected += 1;
    this.selected %= this.images.length;
    this.setSelection();
  };

  dotSelect = event => {
    if (!event.target.classList.contains('dot')) return;

    this.selected = +event.target.dataset.index;
    console.log(this.selected);
    this.setSelection();
  };

  setSelection() {
    const imageHolder = this.carousel.querySelector('.img-holder');
    const dot = this.dotHolder.querySelector(`[data-index='${this.selected}']`);

    imageHolder.style.transform = `translateX(${256 * -this.selected}px)`;
    this.dotHolder.querySelector('.selected')?.classList.remove('selected');
    dot.classList.add('selected');
  }

  placeImages() {
    const imageFrame = document.createElement('div');
    imageFrame.classList.add('img-frame');
    const imageHolder = document.createElement('div');
    imageHolder.classList.add('img-holder');
    this.images.forEach(image => {
      const img = document.createElement('img');
      img.src = `./${image}`;
      imageHolder.appendChild(img);
    });
    imageFrame.appendChild(imageHolder);
    this.carousel.appendChild(imageFrame);
  }

  createProgress() {
    const dotHolder = document.createElement('div');
    dotHolder.classList.add('dot-holder');
    this.images.forEach((_, idx) => {
      const span = document.createElement('span');
      span.dataset.index = idx;
      span.classList.add('dot');
      dotHolder.appendChild(span);
    });
    this.carousel.appendChild(dotHolder);
    return dotHolder;
  }
}

new Carousel(
  carousel,
  ['images/1.jpg', 'images/2.jpg', 'images/3.jpg', 'images/4.jpg', 'images/5.jpg'],
  leftHandle,
  rightHandle
);
-------------------------------
@import url(../../helpers/core.css);

.carousel {
  position: relative;
  width: 256px;
  margin: auto;
}

.img-frame {
  overflow: hidden;
}

.img-holder {
  display: flex;
  transition: 0.1s all;
}

img {
  width: 256px;
  height: 256px;
}

.handle {
  position: absolute;
  z-index: 1;
  display: inline-block;
  width: 40px;
  height: 40px;
  padding: 8px 10px;
  border: 2px solid black;
  border-radius: 50%;
  cursor: pointer;
  user-select: none;
}

.left-handle {
  top: 50%;
  left: 0;
  transform: translate(-100%, -50%);
}

.right-handle {
  top: 50%;
  right: 0;
  transform: translate(100%, -50%);
}

.dot-holder {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 20px;
  column-gap: 10px;
}

.dot-holder > span {
  width: 10px;
  height: 10px;
  background: white;
  border: 1px solid blue;
  border-radius: 50%;
  box-shadow: 0 0 0 2px white inset;
}

.dot-holder .selected {
  background-color: green;
}
------------------------------------------
